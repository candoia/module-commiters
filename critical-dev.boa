out: output collection[string] of string;
p: Project = input;
isfixing := false;
bugfix := false;
issues: set of string;
committer_name : Person;
isBugFixing := function(logging: string, issueRecord: set of string): bool{
    lst := getAsArray(issueRecord);
    foreach(i: int; def(lst[i])){
        if(strfind(lst[i], logging) > -1){
            return true;
        }
    }
    return false;
};

visit(p, visitor {
    before node: Issue -> {
          add(issues, node.number);
        }
});

visit(p, visitor {
	before node: Revision -> {
        comment := node.log;
        isfixing = isfixingrevision(comment);
        if(isfixing){
          bugfix= isBugFixing(comment, issues);
        }
        committer_name = node.committer;
    }
	before node: ChangedFile -> {
       if(bugfix){
         module := node.name;
         index := lastindexof(node.name, "/");
         if(index > 0){
            module = substring(module, 0, index);
            out[module] << committer_name.username;             
         }else{
           out[node.name] << committer_name.username;
         }
       }
	}

  after node: Revision -> {
    isfixing = false;
    bugfix = false;
  }
});
